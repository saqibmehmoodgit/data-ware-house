dockerizing app example 
https://hellokoding.com/docker-compose-with-spring-boot-nginx/
////
Calendar c = Calendar.getInstance();
c.add(Calendar.DAY_OF_YEAR, -6);
Date d = c.getTime();

select c.my_value from Character c 
where  c.my_value = 
     (select max(cc.my_value) from Character cc where cc.create_date > d )
     //////////////
     Query q = session.createQuery("select max(e.id),"+ 
                  "min(e.id) from Entity e where e.master.id = ? ");
    Object[] result =  (Object[]) q.setLong(0, 1L).list().get(0);
    System.out.println("entity with max id is " + result[0] + 
                  " and with min id is " + result[1]);
                  
                  //////////////////
                  
                  @Query("select new com.foo.bar.entity.Document(d.docId, d.filename) from Document d where d.filterCol = ?1")
List<Document> findDocumentsForListing(String filterValue);

///////////////////
Booking booking =  (Booking) session.createQuery("from Booking ORDER BY id DESC")
            .setMaxResults(1).uniqueResult();
            ///////////////////////////////////////////////////\\
            
            Query q = em.createNativeQuery(
      "SELECT c.id, c.name, COUNT(o) as orderCount, AVG(o.price) AS avgOrder " +
      "FROM Customer c, Orders o " +
      "WHERE o.cid = c.id " +
      "GROUP BY c.id, c.name",
      "CustomerDetailsResult");

   @SqlResultSetMapping(
       name="CustomerDetailsResult",
       classes={
          @ConstructorResult(
               targetClass=com.acme.CustomerDetails.class,
                 columns={
                    @ColumnResult(name="id"),
                    @ColumnResult(name="name"),
                    @ColumnResult(name="orderCount"),
                    @ColumnResult(name="avgOrder", type=Double.class)
                    }
          )
       }
      )